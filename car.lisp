;;;
;;; car.lisp --- car specification.
;;;

#|

Двигатель машины задается списком реакционных *камер* (chambers). Каждая *камера* состоит из двух *труб* (pipe) (верхней и нижней). Каждая *труба* это последовательность *секций* (section). Каждая *труба* забирает *газ* (air) в неограниченном количестве, который фактически является смесью нескольких ингредиентов. 

В каждой *секции* идет химическая реакция между компонентами, поступающими из соседней *секции* слева, и топливом, подаваемым туда непосредственно из *бензобака*. Далее реакционная смесь поступает в следующую *секцию* вправо и снова смешивается с топливом. Далее, обе трубы сходятся в *двигателе* (Difference Engine?), в котором производится механическая энергия. Эти соединения бензобака и секций труб неразборные.

Пример: машина может иметь два *бензобака* (нулевой и первый). *Двигатель* может состоять даже из одной *камеры*. В нем  две *трубы*. Верхняя труба состоит из двух *секций*, которые обе питаются из нулевого *бензобака*. Нижняя *труба* состоит из трех *секций*, первая и третья из которых питаются из нулевого *бензобака*, а вторая - из первого *бензобака*.

      upper pipe:  -> section -> section ------------.
    /                   /          /                  \
   /         fuel 0  --<----------'--------.      difference      positive
 air                    \                   \       engine  --->  energy
   \                     \                   \        /
    \ lower pipe:  -> section -> section -> section -'
                                    /
             fuel 1 ---------------'

|#

;;; classes

(defclass fuel-tank ()
  ((name :reader name :initarg :name :type symbol)))

(defclass section ()
  ((fuel-tank :reader fuel-tank :initarg :fuel-tank :type fuel-tank)))

(defclass pipe ()
  ((sections :reader sections :initarg :sections :type list)))

(defclass chamber ()
  ((upper-pipe :reader upper-pipe :initarg :upper-pipe :type pipe)
   (lower-pipe :reader lower-pipe :initarg :lower-pipe :type pipe)))

(defclass car-engine ()
  ((chambers :reader chambers :initarg :chambers :type list)))

;;; methods

;; (defmethod make-car () 
;;   (make-instanse 'car-engine

#|

Правильно собранные машины.

ГИБДД отбирает права у тех, кто ездит на машинах, не соответствующих следующим требованиям:

  * Используются не более шесли различных бензобаков.
  * машина нормализована (см. ниже)
  * машина связна (см. ниже)

Две машины признаются эквивалентными, если можно преобразовать одну в другую, поменяв порядок камер, дублируя (КАК ЭТО?) камеры или меняя местами бензобаки. Машина считается нормализованной, если она закодирована троично (см. ниже), и ее код наименьший из всех возможных.

Связность определяется так:
Бак T зависит от бака S напрямую, если он имеет камеру C, такой, что бак S снабжает некоторую секцию верхней трубы камеры C, и бак T снабжает некоторую секцию нижней трубы камеры C.
Бак T зависит от бака S косвенно, если имеется последовательность прямых зависимостей от бака S к баку T.
Машина связна, если для каждой пары баков (S,T), T зависит от S. Надо учесть, что в вышеупомянутом примере машина НЕ связна, т.к. нет зависимости бака 1 от бака 0

Троичные потоки.

Как машины, так и топлива, представлены в виде структур данных, фактически списков списков ... списков натуральных чисел. (короче, вложенных списков, т.е. деревьев)

Данные для машины и топлива закодированы в виде "тритов" (троичных битов), но больше нам ничего не сказано о кодировании. Так что тут нам придется догадываться самим, анализируя сообщения об ошибках с их сервера. (несчастный сервер...).

Некоторые подсказки:
Код может содержать натуральные числа любого размера, и списки любой глубины.
Код само-отделяем (содержит внутреннии разделители) и парсер будет игнорировать мусор в конце данныз по топливу, но не по машине.  В коде есть определенная избыточность (не каждая строка-трит — это слов в коде), но незначительное.

Пример троичного кода некоторой машины:
221022000022010112201010022001122011110220010

|#
